import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = '7943917934:AAFlfQqO-7Rm1giXntcnoBUsYi9QgSVAWTI'

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –±–∏–ª–µ—Ç–∞–º
questions_data = {
    'ticket_1': [
        {
            'question': "–í –∫–∞–∫–æ–º —Å–ª—É—á–∞–µ –≤–æ–¥–∏—Ç–µ–ª—å —Å–æ–≤–µ—Ä—à–∏—Ç –≤—ã–Ω—É–∂–¥–µ–Ω–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É?",
            'options': [
                "–û—Å—Ç–∞–Ω–æ–≤–∏–≤—à–∏—Å—å –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–¥ –ø–µ—à–µ—Ö–æ–¥–Ω—ã–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º, —á—Ç–æ–±—ã —É—Å—Ç—É–ø–∏—Ç—å –¥–æ—Ä–æ–≥—É –ø–µ—à–µ—Ö–æ–¥—É",
                "–û—Å—Ç–∞–Ω–æ–≤–∏–≤—à–∏—Å—å –Ω–∞ –ø—Ä–æ–µ–∑–∂–µ–π —á–∞—Å—Ç–∏ –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞",
                "–í –æ–±–æ–∏—Ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö"
            ],
            'correct_option': 1,
            'explanation': "–û—Å—Ç–∞–Ω–æ–≤–∏–≤—à–∏—Å—å –Ω–∞ –ø—Ä–æ–µ–∑–∂–µ–π —á–∞—Å—Ç–∏ –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞.",
            'hint': "\n¬´–í—ã–Ω—É–∂–¥–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞¬ª - –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –µ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å—é, –æ–ø–∞—Å–Ω–æ—Å—Ç—å—é, —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–π –ø–µ—Ä–µ–≤–æ–∑–∏–º—ã–º –≥—Ä—É–∑–æ–º, —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –≤–æ–¥–∏—Ç–µ–ª—è (–ø–∞—Å—Å–∞–∂–∏—Ä–∞) –∏–ª–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –Ω–∞ –¥–æ—Ä–æ–≥–µ. (–ü—É–Ω–∫—Ç 1.2 –ü–î–î, —Ç–µ—Ä–º–∏–Ω ¬´–í—ã–Ω—É–∂–¥–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞¬ª)"
        },
        {
            'question': "–†–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –í–∞–º —Å—ä–µ—Ö–∞—Ç—å –Ω–∞ –¥–æ—Ä–æ–≥—É —Å –≥—Ä—É–Ω—Ç–æ–≤—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º?",
            'options': [
                "–†–∞–∑—Ä–µ—à–µ–Ω–æ",
                "–†–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞",
                "–ó–∞–ø—Ä–µ—â–µ–Ω–æ"
            ],
            'correct_option': 0,
            'explanation': "–°—ä–µ–∑–¥ –Ω–∞ –¥–æ—Ä–æ–≥—É —Å –≥—Ä—É–Ω—Ç–æ–≤—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω.",
            'hint': "\n–í–ø–µ—Ä–µ–¥–∏ –ø–æ —Ö–æ–¥—É –í–∞—à–µ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–π –∑–Ω–∞–∫ 1.11.2 ¬´–û–ø–∞—Å–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç¬ª –∏ –∑–Ω–∞–∫–∏ 1.34.2 ¬´–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–∞¬ª, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –Ω–∞ –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏–∏ –¥–æ—Ä–æ–≥–∏ –º–∞–ª–æ–≥–æ —Ä–∞–¥–∏—É—Å–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –≤–∏–¥–∏–º–æ—Å—Ç—å—é. –ù–∏—á–µ–≥–æ, —á—Ç–æ –±—ã –í–∞–º –∑–∞–ø—Ä–µ—â–∞–ª–æ –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞ –¥–æ—Ä–æ–≥—É —Å –≥—Ä—É–Ω—Ç–æ–≤—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º, –Ω–µ—Ç. –ü–æ –í–∞—à–µ–º—É –∂–µ–ª–∞–Ω–∏—é –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç–µ –Ω–∞–ø—Ä–∞–≤–æ. (¬´–î–æ—Ä–æ–∂–Ω—ã–µ –∑–Ω–∞–∫–∏¬ª).",
            'image_path': '/Users/kirillivanov/Desktop/Programtraining/PDD bot/photoforticket/n1_2.jpg'
        },
        {
            'question': "–ú–æ–∂–Ω–æ –ª–∏ –í–∞–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ –¥–ª—è –ø–æ—Å–∞–¥–∫–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–∞?",
            'options': [
                "–ú–æ–∂–Ω–æ",
                "–ú–æ–∂–Ω–æ, –µ—Å–ª–∏ –í—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Ç–∞–∫—Å–∏",
                "–ù–µ–ª—å–∑—è"
            ],
            'correct_option': 0,
            'explanation': "–°—ä–µ–∑–¥ –Ω–∞ –¥–æ—Ä–æ–≥—É —Å –≥—Ä—É–Ω—Ç–æ–≤—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω.",
            'hint': "\n–ó–Ω–∞–∫ 3.28 ¬´–°—Ç–æ—è–Ω–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞¬ª –Ω–µ –∑–∞–ø—Ä–µ—â–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É. –í —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ –í–∞–º —Å–æ–≤–µ—Ä—à–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É –º–æ–∂–Ω–æ. (¬´–î–æ—Ä–æ–∂–Ω—ã–µ –∑–Ω–∞–∫–∏¬ª)",
            'image_path': '/Users/kirillivanov/Desktop/Programtraining/PDD bot/photoforticket/n1_3.jpg'
        },
        {
            'question': "–ö–∞–∫–∏–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –∑–∞–ø—Ä–µ—â–∞—é—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º –º–æ–ø–µ–¥–æ–≤?",
            'options': [
                "–¢–æ–ª—å–∫–æ –ê",
                "–¢–æ–ª—å–∫–æ –ë",
                "–í –∏ –ì",
                "–í—Å–µ"
            ],
            'correct_option': 3,
            'explanation': "–í—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞–∫–∏ –∑–∞–ø—Ä–µ—â–∞—é—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º –º–æ–ø–µ–¥–æ–≤.",
            'hint': "\n–ó–∞–ø—Ä–µ—â–∞—é—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º –º–æ–ø–µ–¥–æ–≤ –≤—Å–µ –∑–Ω–∞–∫–∏ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö: –ê ‚Äì 4.4.1 ¬´–í–µ–ª–æ—Å–∏–ø–µ–¥–Ω–∞—è –¥–æ—Ä–æ–∂–∫–∞¬ª; –ë ‚Äì 5.14.1 ¬´–ü–æ–ª–æ—Å–∞ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤¬ª; –í ‚Äì 4.5.2 ¬´–ü–µ—à–µ—Ö–æ–¥–Ω–∞—è –∏ –≤–µ–ª–æ—Å–∏–ø–µ–¥–Ω–∞—è –¥–æ—Ä–æ–∂–∫–∞ —Å —Å–æ–≤–º–µ—â–µ–Ω–Ω—ã–º –¥–≤–∏–∂–µ–Ω–∏–µ–º¬ª; –ì ‚Äì 4.5.4 ¬´–ü–µ—à–µ—Ö–æ–¥–Ω–∞—è –∏ –≤–µ–ª–æ—Å–∏–ø–µ–¥–Ω–∞—è –¥–æ—Ä–æ–∂–∫–∞ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –¥–≤–∏–∂–µ–Ω–∏—è¬ª.",
            'image_path': '/Users/kirillivanov/Desktop/Programtraining/PDD bot/photoforticket/n1_4.jpg'
        },
    ],
    'ticket_2': [
        {
            'question': "–°–∫–æ–ª—å–∫–æ –ø–æ–ª–æ—Å –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –∏–º–µ–µ—Ç –¥–∞–Ω–Ω–∞—è –¥–æ—Ä–æ–≥–∞?",
            'options': [
                "–î–≤–µ",
                "–ß–µ—Ç—ã—Ä–µ",
                "–ü—è—Ç—å"
            ],
            'correct_option': 1,
            'explanation': "–°—ä–µ–∑–¥ –Ω–∞ –¥–æ—Ä–æ–≥—É —Å –≥—Ä—É–Ω—Ç–æ–≤—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω.",
            'hint': "\n–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ª–æ—Å–∞ –¥–µ–ª–∏—Ç –¥–æ—Ä–æ–≥—É –Ω–∞ –ø—Ä–æ–µ–∑–∂–∏–µ —á–∞—Å—Ç–∏. –î–∞–Ω–Ω–∞—è –¥–æ—Ä–æ–≥–∞ –∏–º–µ–µ—Ç –¥–≤–µ –ø—Ä–æ–µ–∑–∂–∏–µ —á–∞—Å—Ç–∏, —á–µ—Ç—ã—Ä–µ –ø–æ–ª–æ—Å—ã –¥–≤–∏–∂–µ–Ω–∏—è. (–ü—É–Ω–∫—Ç 1.2 –ü–î–î)",
            'image_path': '/Users/kirillivanov/Desktop/Programtraining/PDD bot/photoforticket/n2_1.jpg'
        },

    ]
}

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"User {update.message.chat.id} started the bot.")
    keyboard = [
        [InlineKeyboardButton("üìÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç", callback_data='start_test')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ë–∏–ª–µ—Ç—ã –ü–î–î 2023, 2024 –≥.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç"
async def start_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    logger.info(f"User {query.message.chat.id} clicked '–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç'.")
    await query.answer()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∏–ª–µ—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–∏–ª–µ—Ç—ã –æ—Ç 1 –¥–æ 40)
    keyboard = [[InlineKeyboardButton(f"‚Ññ {i}", callback_data=f"ticket_{i}") for i in range(1, 6)],  # –±–∏–ª–µ—Ç—ã 1-5
                [InlineKeyboardButton(f"‚Ññ {i}", callback_data=f"ticket_{i}") for i in range(6, 11)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–∏–ª–µ—Ç–∞
async def select_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    logger.info(f"User {query.message.chat.id} selected ticket {query.data}.")
    await query.answer()

    ticket_id = query.data  # –ü–æ–ª—É—á–∞–µ–º ID –±–∏–ª–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "ticket_1")
    await send_question(update, context, ticket_id, 0)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ —Å —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑
async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE, ticket_id, question_index):
    question_data = questions_data[ticket_id][question_index]

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
    question_text = f"–ë–∏–ª–µ—Ç ‚Ññ {ticket_id.split('_')[1]}, –≤–æ–ø—Ä–æ—Å {question_index + 1} –∏–∑ 20\n\n"
    question_text += f"{question_data['question']}\n\n"

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ–∫—Å—Ç
    for i, option in enumerate(question_data['options']):
        question_text += f"{i + 1}. {option}\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if 'image_path' in question_data:
        photo_path = question_data['image_path']
        await update.callback_query.message.reply_photo(photo=open(photo_path, 'rb'))

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
    options = [
        [InlineKeyboardButton(f"{i + 1}. {option}", callback_data=f"{ticket_id}_q{question_index}_{i}")]
        for i, option in enumerate(question_data['options'])
    ]
    reply_markup = InlineKeyboardMarkup(options)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await update.callback_query.message.reply_text(question_text, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    callback_data = query.data
    logger.info(f"User {query.message.chat.id} answered question: {callback_data}")

    # –û—Ç–≤–µ—Ç–∏–º –Ω–∞ callback_query (—á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–∞–ª –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
    await query.answer()

    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback –Ω–∞ 4 —á–∞—Å—Ç–∏
        data_parts = callback_data.split('_')
        logger.info(f"Data parts after split: {data_parts}")

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ä–∞–∑–±–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: ticket, q0, question_index, selected_option
        if len(data_parts) != 4:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ callback_data: {len(data_parts)}")

        ticket_id = f"ticket_{data_parts[1]}"  # –§–æ—Ä–º–∏—Ä—É–µ–º ticket_id (–Ω–∞–ø—Ä–∏–º–µ—Ä, ticket_1)
        question_id = int(data_parts[2][1:])   # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
        selected_option = int(data_parts[3])   # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç

        # –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å—ë –≤–µ—Ä–Ω–æ
        logger.info(f"Ticket ID: {ticket_id}, Question ID: {question_id}, Selected Option: {selected_option}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞
        question_data = questions_data[ticket_id][question_id]
        correct_option = question_data['correct_option']
        explanation = question_data['explanation']

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        options = []
        for i, option in enumerate(question_data['options']):
            if i == correct_option:
                options.append([InlineKeyboardButton(f"‚úÖ {i + 1}. {option}", callback_data=f"{ticket_id}_q{question_id}_{i}")])
            elif i == selected_option:
                options.append([InlineKeyboardButton(f"‚ùå {i + 1}. {option}", callback_data=f"{ticket_id}_q{question_id}_{i}")])
            else:
                options.append([InlineKeyboardButton(f"{i + 1}. {option}", callback_data=f"{ticket_id}_q{question_id}_{i}")])

        reply_markup = InlineKeyboardMarkup(options)
        await query.message.edit_reply_markup(reply_markup=reply_markup)

        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        if selected_option != correct_option:
            await query.message.reply_text(f"–ü–æ–¥—Å–∫–∞–∑–∫–∞üí° {question_data['hint']}")

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        next_question = question_id + 1
        if next_question < len(questions_data[ticket_id]):
            await send_question(update, context, ticket_id, next_question)
        else:
            await query.message.reply_text("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")

    except ValueError as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.error(f"Error processing callback data: {e}")
        await query.message.reply_text(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(start_test, pattern='start_test'))
    app.add_handler(CallbackQueryHandler(select_ticket, pattern=r'^ticket_\d+$'))
    app.add_handler(CallbackQueryHandler(handle_answer, pattern=r'^ticket_\d+_q\d+_\d+$'))

    app.run_polling()

if __name__ == '__main__':
    main()
